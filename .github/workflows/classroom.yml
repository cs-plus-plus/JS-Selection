name: autograde

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  autograde:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install test deps
        run: |
          npm init -y >/dev/null 2>&1 || true
          npm install --save-dev jest@29 jest-environment-jsdom@29

      - name: Write jest config (use jsdom)
        run: |
          cat > jest.config.cjs <<'EOF'
          module.exports = {
            testEnvironment: 'jsdom',
            testMatch: ['**/__tests__/**/*.test.cjs']
          };
          EOF

      - name: Write tests
        run: |
          mkdir -p __tests__
          cat > __tests__/selection-8_3.test.cjs <<'EOF'
          const fs   = require('fs');
          const path = require('path');

          // Execute student's script.js "as if" included by a <script> tag
          // in a browser page. We stub window.prompt/alert and mirror to globals.
          function runOnceWith(promptAnswer) {
            // fresh DOM (not strictly required, but keeps runs clean)
            document.body.innerHTML = '';

            const calls = { prompts: [], alerts: [] };
            const stubPrompt = (msg='') => { calls.prompts.push(String(msg)); return promptAnswer; };
            const stubAlert  = (msg='') => { calls.alerts.push(String(msg)); };

            // attach to window and global so both `prompt()` and `window.prompt()` are caught
            window.prompt = stubPrompt;
            window.alert  = stubAlert;
            global.prompt = stubPrompt;
            global.alert  = stubAlert;

            // load student script as source text and execute in current global scope
            const code = fs.readFileSync(path.resolve('script.js'), 'utf8');
            // Run immediately (page-on-load behavior), not via require()
            // Using Function avoids Node's CommonJS wrapping & preserves global prompt/alert.
            const fn = new Function(code);
            fn();

            // cleanup stubs so subsequent runs can't accidentally reuse them
            delete window.prompt;
            delete window.alert;
            delete global.prompt;
            delete global.alert;

            return calls;
          }

          function expectExactOnePromptAndAlert(calls) {
            expect(calls.prompts.length).toBe(1);
            expect(calls.alerts.length).toBe(1);
          }

          describe('Unit 8.3 – Selection via prompt/alert (runs on load, no exports)', () => {
            test('t_invalid: bad input => exactly one alert "Invalid input"', () => {
              const bads = ['abc', '', '   ', '-1', null, undefined, '17.5'];
              for (const ans of bads) {
                const calls = runOnceWith(ans);
                expectExactOnePromptAndAlert(calls);
                expect(/^Invalid input$/i.test(calls.alerts[0])).toBe(true);
              }
            });

            test('t_child: prompts once; alerts "Child: $7"', () => {
              const calls = runOnceWith('5');
              expectExactOnePromptAndAlert(calls);
              expect(/^Child:\s*\$7$/i.test(calls.alerts[0])).toBe(true);
            });

            test('t_teen: prompts once; alerts "Teen: $12"', () => {
              const teenAges = ['13', '17'];
              for (const a of teenAges) {
                const calls = runOnceWith(a);
                expectExactOnePromptAndAlert(calls);
                expect(/^Teen:\s*\$12$/i.test(calls.alerts[0])).toBe(true);
              }
            });

            test('t_adult: prompts once; alerts "Adult: $20"', () => {
              const adultAges = ['18', '35', '64'];
              for (const a of adultAges) {
                const calls = runOnceWith(a);
                expectExactOnePromptAndAlert(calls);
                expect(/^Adult:\s*\$20$/i.test(calls.alerts[0])).toBe(true);
              }
            });

            test('t_senior: prompts once; alerts "Senior: $12"', () => {
              const seniorAges = ['65', '80'];
              for (const a of seniorAges) {
                const calls = runOnceWith(a);
                expectExactOnePromptAndAlert(calls);
                expect(/^Senior:\s*\$12$/i.test(calls.alerts[0])).toBe(true);
              }
            });
          });
          EOF

      # --- Individual graded runs ---
      - id: t_invalid
        name: invalid input
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: invalid input
          setup-command: echo "ready"
          command: npx jest --runInBand --testNamePattern "t_invalid:"
          timeout: 60
          max-score: 20

      - id: t_child
        name: child $7
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: child $7
          setup-command: echo "ready"
          command: npx jest --runInBand --testNamePattern "t_child:"
          timeout: 60
          max-score: 20

      - id: t_teen
        name: teen $12
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: teen $12
          setup-command: echo "ready"
          command: npx jest --runInBand --testNamePattern "t_teen:"
          timeout: 60
          max-score: 20

      - id: t_adult
        name: adult $20
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: adult $20
          setup-command: echo "ready"
          command: npx jest --runInBand --testNamePattern "t_adult:"
          timeout: 60
          max-score: 20

      - id: t_senior
        name: senior $12
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: senior $12
          setup-command: echo "ready"
          command: npx jest --runInBand --testNamePattern "t_senior:"
          timeout: 60
          max-score: 20

      # --- Summary (optional nice-to-have) ---
      - name: Build summary
        env:
          R_INVALID: ${{ steps.t_invalid.outputs.result }}
          R_CHILD:   ${{ steps.t_child.outputs.result }}
          R_TEEN:    ${{ steps.t_teen.outputs.result }}
          R_ADULT:   ${{ steps.t_adult.outputs.result }}
          R_SENIOR:  ${{ steps.t_senior.outputs.result }}
        run: |
          node - <<'NODE'
          const fs = require('fs');
          function parse(b64){try{return JSON.parse(Buffer.from(b64||'','base64').toString('utf8'))}catch{return{}}}
          function row(lbl, r){const o=parse(r);return `- ${/pass/i.test(o.status||'')?'✅':'❌'} ${lbl} (${o.totalPoints||0}/${o.maxPoints||0})`}
          const md = [
            '# Unit 8.3 Autograder Summary',
            row('Invalid input', process.env.R_INVALID),
            row('Child $7',      process.env.R_CHILD),
            row('Teen $12',      process.env.R_TEEN),
            row('Adult $20',     process.env.R_ADULT),
            row('Senior $12',    process.env.R_SENIOR),
          ].join('\n');
          console.log(md);
          if (process.env.GITHUB_STEP_SUMMARY) fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, md+'\n');
          NODE

       # Collect the results from the five graders into job env vars
      - name: Prepare reporter env
        shell: bash
        run: |
          # IMPORTANT: Reporter expects T_<runner>_RESULTS where <runner> matches
          # the names you pass in `runners` below (case-insensitive after the T_).
          echo "T_INVALID_RESULTS=${{ steps.t_invalid.outputs.result }}" >> "$GITHUB_ENV"
          echo "T_CHILD_RESULTS=${{ steps.t_child.outputs.result }}"     >> "$GITHUB_ENV"
          echo "T_TEEN_RESULTS=${{ steps.t_teen.outputs.result }}"       >> "$GITHUB_ENV"
          echo "T_ADULT_RESULTS=${{ steps.t_adult.outputs.result }}"     >> "$GITHUB_ENV"
          echo "T_SENIOR_RESULTS=${{ steps.t_senior.outputs.result }}"   >> "$GITHUB_ENV"

      # Use a literal, single-quoted, single-line runners string
      - name: Autograding Reporter
        uses: classroom-resources/autograding-grading-reporter@d13b5912daf5042ac1b71bc38bdb4a6bcd61d8ca # pin v1 SHA that works
        with:
          runners: 't_invalid,t_child,t_teen,t_adult,t_senior'
          token: ${{ github.token }}

